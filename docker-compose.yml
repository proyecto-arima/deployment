services:

  nginx:
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    profiles: ["deploy"]
    ports:
      - '80:80'
      - '81:81'
      - '443:443'
    volumes:
      - ./data/nginx-proxy-manager:/data
      - ./letsencrypt:/etc/letsencrypt

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    profiles: ["monitoring"]
    security_opt:
      - no-new-privileges:true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer_data:/data

  mongo:
    image: mongo
    restart: unless-stopped
    profiles: ["mongo"]
    healthcheck:
      test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD} 
    ports:
      - 27017:27017
    volumes:
      - ./data/db:/data/db

  # TODO: WIP smtp
  fake-smtp-server:
    image: gessnerfl/fake-smtp-server:2.2.1
    container_name: fake-smtp-server
    profiles: ["smtp"]
    restart: unless-stopped
    environment:
      - FAKESMTP_AUTHENTICATION_USERNAME=${SMTP_USER}
      - FAKESMTP_AUTHENTICATION_PASSWORD=${SMTP_PASS}
    ports:
        # smtp port
      - ${SMTP_PORT}:${SMTP_PORT}

        # management api
      - 8082:8082

        # web ui
      - 8083:8083

  backend:
    image: ghcr.io/proyecto-arima/backend:${LATEST_TAG}
    container_name: backend
    profiles: ["server"]
    restart: always
    environment:
      - NODE_ENV=${NODE_ENV}
      - MONGODB_URI=${MONGODB_URI}
      - CORS_ORIGIN=${CORS_ORIGIN}
 
      - HOST=${HOSTNAME}
      - PORT=${PORT}
      - FRONTEND_URL=${FRONTEND_URL}

      - JWT_SECRET=${JWT_SECRET}
      - COMMON_RATE_LIMIT_WINDOW_MS=${COMMON_RATE_LIMIT_WINDOW_MS}
      - COMMON_RATE_LIMIT_MAX_REQUESTS=${COMMON_RATE_LIMIT_MAX_REQUESTS}

      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_SENDER=${SMTP_SENDER}
      - SMTP_TLS=${SMTP_TLS}
      - SMTP_AUTH_TYPE=${SMTP_AUTH_TYPE}

      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - BUCKET=${BUCKET}
      - PREFIX=${PREFIX}

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health-check"]
      interval: 30s
      timeout: 10s
      retries: 5

  webapp:
    image: ghcr.io/proyecto-arima/webapp:${LATEST_TAG}
    container_name: webapp
    profiles: ["webapp"]
    restart: always
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL}
      - REACT_APP_ENV=${REACT_APP_ENV}

volumes:
  portainer_data:
